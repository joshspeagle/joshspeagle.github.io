name: Update Publication Data

on:
  # Run weekly on Sundays at midnight UTC
  schedule:
    - cron: '0 0 * * 0'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes'
        required: false
        default: false
        type: boolean

jobs:
  update-publications:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Need full history for proper git operations
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create backup directory
      run: |
        mkdir -p assets/data/backups
    
    - name: Fetch publication data
      env:
        ADS_API_KEY: ${{ secrets.ADS_API_KEY }}
      run: |
        cd scripts
        python fetch_publications.py
    
    - name: Check for changes
      id: check_changes
      run: |
        # Check if there are any changes to the data files
        if git diff --quiet assets/data/publications_*.json; then
          echo "No changes detected in publication data"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in publication data"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push changes
      if: steps.check_changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Add the updated data files
        git add assets/data/publications_*.json
        
        # Get metrics for commit message
        TOTAL_PAPERS=$(python -c "
        import json
        try:
            with open('assets/data/publications_data.json', 'r') as f:
                data = json.load(f)
                print(data.get('metrics', {}).get('totalPapers', 'Unknown'))
        except:
            print('Unknown')
        ")
        
        H_INDEX=$(python -c "
        import json
        try:
            with open('assets/data/publications_data.json', 'r') as f:
                data = json.load(f)
                print(data.get('metrics', {}).get('hIndex', 'Unknown'))
        except:
            print('Unknown')
        ")
        
        CITATIONS=$(python -c "
        import json
        try:
            with open('assets/data/publications_data.json', 'r') as f:
                data = json.load(f)
                print(data.get('metrics', {}).get('totalCitations', 'Unknown'))
        except:
            print('Unknown')
        ")
        
        # Create commit message with metrics
        COMMIT_MSG="Update publication metrics [automated]

        Papers: ${TOTAL_PAPERS}
        H-index: ${H_INDEX}  
        Citations: ${CITATIONS}
        
        Updated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
        
        # Commit and push
        git commit -m "$COMMIT_MSG"
        git push
    
    - name: Create workflow summary
      if: always()
      run: |
        echo "## Publication Data Update Summary" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "assets/data/publications_data.json" ]; then
          # Extract metrics from the data file
          python3 << 'EOF' >> $GITHUB_STEP_SUMMARY
        import json
        
        try:
            with open('assets/data/publications_data.json', 'r') as f:
                data = json.load(f)
            
            metrics = data.get('metrics', {})
            sources = data.get('sources', {})
            
            print(f"### 📊 Current Metrics")
            print(f"- **Total Papers:** {metrics.get('totalPapers', 'N/A')}")
            print(f"- **H-Index:** {metrics.get('hIndex', 'N/A')}")
            print(f"- **i10-Index:** {metrics.get('i10Index', 'N/A')}")
            print(f"- **Total Citations:** {metrics.get('totalCitations', 'N/A')}")
            print(f"- **Last Updated:** {data.get('lastUpdated', 'N/A')}")
            print()
            
            print(f"### 🔗 Data Sources")
            for source, info in sources.items():
                if isinstance(info, dict):
                    papers = info.get('publications', 0)
                    has_metrics = info.get('metrics', False)
                    print(f"- **{source.replace('_', ' ').title()}:** {papers} publications, metrics: {'✅' if has_metrics else '❌'}")
                    
        except Exception as e:
            print(f"❌ Error reading publication data: {e}")
        EOF
        else
          echo "❌ No publication data file found" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add change status
        if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
          echo "### ✅ Changes Committed" >> $GITHUB_STEP_SUMMARY
          echo "Publication data has been updated and committed to the repository." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ℹ️ No Changes" >> $GITHUB_STEP_SUMMARY
          echo "No updates were needed for the publication data." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Notify on failure
      if: failure()
      run: |
        echo "## ❌ Publication Update Failed" >> $GITHUB_STEP_SUMMARY
        echo "The publication data update workflow encountered an error." >> $GITHUB_STEP_SUMMARY
        echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Common Issues:" >> $GITHUB_STEP_SUMMARY
        echo "- ADS API key may be invalid or missing" >> $GITHUB_STEP_SUMMARY
        echo "- Google Scholar may be rate limiting requests" >> $GITHUB_STEP_SUMMARY
        echo "- Network connectivity issues" >> $GITHUB_STEP_SUMMARY
        echo "- Changes to external API formats" >> $GITHUB_STEP_SUMMARY